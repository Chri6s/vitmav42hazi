<%- include('header') -%>

<style>
	.search-dropdown {
		padding: 0;
	}
	
	.search-dropdown * {
		border: unset;
	}
	
	.search-bar {
		background-color: snow;
		border-radius: 10px;
		margin-bottom: 0.5rem;
		padding: 0;
	}
	
	.dropdown-menu {
		background-color: var(--smokegray);
		border: 1px solid black;
	}
	
	.dropdown-menu *:not(:last-child) {
		border-bottom: 1px solid gray;
	}
	
	.book-header {
		background-color: var(--smokegray);
		border-radius: 10px;
		margin-bottom: 0.5rem;
		padding: 0.5rem;
		font-weight: bold;
		padding-right: 1.3rem;
		/*Hack for aligning the header*/
	}
	
	.book-header *:not(:last-child) {
		border-right: 1px solid black;
		padding: 0;
	}
</style>

<%- include('navbar') -%>

<div class="container">
	<div class="main-content">
		<h2 class="section-title"><span class="roboto">Search for books to borrow</span></h2>
		
		<% if (locals.error) { %>
			<div class="alert alert-danger alert-dismissible fade show" role="alert">
				<%= locals.error %>
				<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
			</div>
			<% } %>
			
			<% if (locals.successMessage) { %>
				<div class="alert alert-success alert-dismissible fade show" role="alert">
					<%= locals.successMessage %>
					<button type="button" class="btn-close" data-bs-dismiss="alert"
					aria-label="Close"></button>
				</div>
				<% } %>
				
				<div class="d-flex align-items-center search-bar">
					<div class="dropdown search-dropdown">
						<button class="btn btn-secondary dropdown-toggle search-dd" type="button"
						data-bs-toggle="dropdown" aria-expanded="false">
						<%= locals.searchType ? locals.searchType.charAt(0).toUpperCase() +
						locals.searchType.slice(1) : 'Title' %>
					</button>
					<ul class="dropdown-menu">
						<li><a class="dropdown-item" onclick="setDropdownText(this)"
							data-search-type="title">Title</a></li>
							<li><a class="dropdown-item" onclick="setDropdownText(this)"
								data-search-type="author">Author</a></li>
								<li><a class="dropdown-item" onclick="setDropdownText(this)"
									data-search-type="date">Date</a></li>
									<li><a class="dropdown-item" onclick="setDropdownText(this)"
										data-search-type="ISBN">ISBN</a></li>
									</ul>
								</div>
								<form id="searchForm" action="/search" method="GET" class="d-flex flex-grow-1">
									<input type="hidden" id="searchType" name="type"
									value="<%= locals.searchType || 'title' %>">
									<input type="text" class="form-control roboto" name="term"
									placeholder="Search for books" value="<%= locals.searchTerm || '' %>">
									<button class="btn btn-secondary" type="submit">
										Search
									</button>
								</form>
							</div>
							
							<% if (locals.user && locals.user.type==='admin' ) { %>
								<div class="d-flex justify-content-end mb-3">
									<button class="btn login-btn" onclick="addNewBook()">Add New Book</button>
								</div>
								<% } %>
								
								<div class="d-flex align-items-center book-header">
									<div class="col-3 text-center">Author</div>
									<div class="col-4 text-center">Title</div>
									<div class="col-2 text-center">Year</div>
									<div class="col-1 text-center">Available</div>
									<div class="col-2 text-center">Actions</div>
								</div>
								<div class="books-container">
									<% if (locals.books && locals.books.length> 0) { %>
										<% locals.books.forEach(function(book) { %>
											<div class="book-row d-flex align-items-center">
												<div class="col-3 text-center">
													<%= book.author %>
												</div>
												<div class="col-4 text-center">
													<%= book.title %>
												</div>
												<div class="col-2 text-center">
													<%= book.year %>
												</div>
												<div class="col-1 text-center"><span class="status-check">
													<%= book.status ? '✓' : '✗' %>
												</span></div>
												<div class="col-2 text-center">
													<% if (locals.user && locals.user.type==='admin' ) { %>
														<button class="borrow-btn"
														onclick="editBook('<%= book.id %>', '<%= book.title %>', '<%= book.author %>', '<%= book.ISBN %>', '<%= book.year %>')">Edit</button>
														<button class="btn btn-danger btn-sm"
														onclick="deleteBook('<%= book.id %>')">Delete</button>
														<% } else { %>
															<% if (book.status) { %>
																<button class="borrow-btn"
																onclick="borrowBook('<%= book.id %>')">Borrow</button>
																<% } else { %>
																	<button class="btn btn-secondary btn-sm"
																	disabled>Unavailable</button>
																	<% } %>
																	<% } %>
																</div>
															</div>
															<% }); %>
															<% } else { %>
																<div
																class="book-row d-flex align-items-center justify-content-center">
																<p>No books found. Try a different search term.</p>
															</div>
															<% } %>
														</div>
													</div>
												</div>
												
												<!-- Edit Book Modal -->
												<div class="modal fade" id="editBookModal" tabindex="-1" aria-labelledby="editBookModalLabel"
												aria-hidden="true">
												<div class="modal-dialog">
													<div class="modal-content">
														<div class="modal-header">
															<h5 class="modal-title" id="editBookModalLabel">Edit Book</h5>
															<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
														</div>
														<div class="modal-body">
															<form id="editBookForm">
																<input type="hidden" id="editBookId" name="bookId">
																<div class="mb-3">
																	<label for="editBookTitle" class="form-label">Title</label>
																	<input type="text" class="form-control" id="editBookTitle" name="title" required>
																</div>
																<div class="mb-3">
																	<label for="editBookAuthor" class="form-label">Author</label>
																	<input type="text" class="form-control" id="editBookAuthor" name="author" required>
																</div>
																<div class="mb-3">
																	<label for="editBookISBN" class="form-label">ISBN</label>
																	<input type="text" class="form-control" id="editBookISBN" name="ISBN" required>
																</div>
																<div class="mb-3">
																	<label for="editBookYear" class="form-label">Year</label>
																	<input type="text" class="form-control" id="editBookYear" name="year" required>
																</div>
																<div class="mb-3">
																	<label for="editBookCategory" class="form-label">Category</label>
																	<input type="text" class="form-control" id="editBookCategory" name="category">
																</div>
															</form>
														</div>
														<div class="modal-footer">
															<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
															<button type="button" class="btn login-btn" onclick="submitEditBook()">Update Book</button>
														</div>
													</div>
												</div>
											</div>
											
											<!-- Add Book Modal -->
											<div class="modal fade" id="addBookModal" tabindex="-1" aria-labelledby="addBookModalLabel" aria-hidden="true">
												<div class="modal-dialog">
													<div class="modal-content">
														<div class="modal-header">
															<h5 class="modal-title" id="addBookModalLabel">Add New Book</h5>
															<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
														</div>
														<div class="modal-body">
															<form id="addBookForm" action="/book/add" method="POST">
																<div class="mb-3">
																	<label for="bookTitle" class="form-label">Title</label>
																	<input type="text" class="form-control" id="bookTitle" name="title" required>
																</div>
																<div class="mb-3">
																	<label for="bookAuthor" class="form-label">Author</label>
																	<input type="text" class="form-control" id="bookAuthor" name="author" required>
																</div>
																<div class="mb-3">
																	<label for="bookISBN" class="form-label">ISBN</label>
																	<input type="text" class="form-control" id="bookISBN" name="ISBN" required>
																</div>
																<div class="mb-3">
																	<label for="bookYear" class="form-label">Year</label>
																	<input type="text" class="form-control" id="bookYear" name="year" required>
																</div>
																<div class="mb-3">
																	<label for="bookCategory" class="form-label">Category</label>
																	<input type="text" class="form-control" id="bookCategory" name="category">
																</div>
															</form>
														</div>
														<div class="modal-footer">
															<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
															<button type="submit" class="btn login-btn" form="addBookForm">Add Book</button>
														</div>
													</div>
												</div>
											</div>
											
											<script>
												function setDropdownText(element) {
													const dropdownButton = document.querySelector('.search-dd');
													dropdownButton.innerHTML = element.innerHTML;
													
													const activeItem = document.querySelector('.dropdown-item.active');
													if (activeItem) {
														activeItem.classList.remove('active');
													}
													element.classList.add('active');
												}
												
												function editBook(id, title, author, isbn, year) {
													document.getElementById('editBookId').value = id;
													document.getElementById('editBookTitle').value = title;
													document.getElementById('editBookAuthor').value = author;
													document.getElementById('editBookISBN').value = isbn;
													document.getElementById('editBookYear').value = year;
													
													const editBookModal = new bootstrap.Modal(document.getElementById('editBookModal'));
													editBookModal.show();
												}
												
												function submitEditBook() {
													const id = document.getElementById('editBookId').value;
													const title = document.getElementById('editBookTitle').value;
													const author = document.getElementById('editBookAuthor').value;
													const isbn = document.getElementById('editBookISBN').value;
													const category = document.getElementById('editBookCategory').value;
													const year = document.getElementById('editBookYear').value;
													
													const formData = {
														title: title,
														author: author,
														ISBN: isbn,
														year: year,
														category: category
													};
													
													fetch(`/book/edit/${id}`, {
														method: 'POST',
														headers: {
															'Content-Type': 'application/json',
															'Accept': 'application/json'
														},
														body: JSON.stringify(formData)
													})
													.then(response => {
														if (response.redirected) {
															window.location.href = response.url;
															return;
														}
														return response.json();
													})
													.then(data => {
														if (data && data.success) {
															window.location.reload();
														} else {
															alert(data.message || 'An error occurred');
														}
													})
													.catch(error => {
														console.error('Error:', error);
														alert('An error occurred while updating the book');
													});
													
													const editBookModal = bootstrap.Modal.getInstance(document.getElementById('editBookModal'));
													editBookModal.hide();
												}
												// Delete book functionality
												function deleteBook(id) {
													if (confirm('Are you sure you want to delete this book? This action cannot be undone.')) {
														fetch(`/book/${id}`, {
															method: 'DELETE',
															headers: {
																'Accept': 'application/json'
															}
														})
														.then(response => response.json())
														.then(data => {
															if (data.success) {
																window.location.reload();
															} else {
																alert(data.message || 'An error occurred while deleting the book.');
															}
														})
														.catch(error => {
															console.error('Error:', error);
															alert('An error occurred while deleting the book.');
														});
													}
												}
												
												// Borrow book functionality
												function borrowBook(id) {
													fetch(`/book/borrow/${id}`, {
														method: 'POST',
														headers: {
															'Accept': 'application/json'
														}
													})
													.then(response => response.json())
													.then(data => {
														if (data.success) {
															window.location.reload();
														} else {
															alert(data.message || 'This book cannot be borrowed at the moment.');
														}
													})
													.catch(error => {
														console.error('Error:', error);
														alert('An error occurred while borrowing the book.');
													});
												}
												

												function addNewBook() {
													const addBookModal = new bootstrap.Modal(document.getElementById('addBookModal'));
													addBookModal.show();
												}
											</script>
											
											<%- include('footer') -%>